"use strict";(self.webpackChunkangular_bootstrap_template=self.webpackChunkangular_bootstrap_template||[]).push([[592],{7105:(H,E,R)=>{R.d(E,{$:()=>f});class c{constructor(a,e,t,n){this.id=-1,this.restaurantName="",this.restaurantLocation="",this.restaurantMainMenu="",this.restaurantPhone="",this.restaurantName=a,this.restaurantLocation=e,this.restaurantMainMenu=t,this.restaurantPhone=n}}var i=R(3104),g=R(1223),D=R(4362);let f=(()=>{class d{constructor(e,t){this.restaurantDatabaseService=e,this.reviewDALService=t,this.reviews=null}getDatabaseRestaurant(){return this.restaurantDatabaseService.initDBRestaurant(),i.f.db}insertRestaurant(e,t){this.getDatabaseRestaurant().transaction(function n(s){let l=[e.restaurantName,e.restaurantLocation,e.restaurantMainMenu,e.restaurantPhone];console.log(l),s.executeSql("INSERT INTO restaurants(restaurantName, restaurantLocation, restaurantMainMenu, restaurantPhone) VALUES(?, ?, ?, ?);",l,t,i.f.errorHandler)},i.f.errorHandler,()=>console.log("Success: insert transaction successfully"))}selectAllRestaurant(){let e=[],t=[];return new Promise((n,s)=>{this.getDatabaseRestaurant().transaction(function r(l){l.executeSql("SELECT * FROM restaurants;",e,(h,w)=>{if(w.rows.length>0){for(let o=0;o<w.rows.length;o++){let u=w.rows[o],S=new c(u.restaurantName,u.restaurantLocation,u.restaurantMainMenu,u.restaurantPhone);S.id=u.id,t.push(S)}n(t)}else s("No restaurants found")},i.f.errorHandler)},i.f.errorHandler,()=>console.log("Success: selectAll transaction successfully"))})}deleteRestaurant(e,t){this.reviewDALService.selectAllReview().then(n=>{if(this.reviews=n,this.reviews.find(r=>r.restaurantId===e.id))alert("You need to delete the corresponding reviews first to delete the restaurant.");else{let r=function(l){l.executeSql("DELETE FROM restaurants WHERE id=?;",[e.id],t,i.f.errorHandler)};this.getDatabaseRestaurant().transaction(r,i.f.errorHandler,()=>console.log("Success: delete transaction successfully"))}}).catch(n=>{console.log(n),this.getDatabaseRestaurant().transaction(function s(r){r.executeSql("DELETE FROM restaurants WHERE id=?;",[e.id],t,i.f.errorHandler)},i.f.errorHandler,()=>console.log("Success: delete transaction successfully"))})}updateRestaurant(e,t){this.getDatabaseRestaurant().transaction(function n(s){let l=[e.restaurantName,e.restaurantLocation,e.restaurantMainMenu,e.restaurantPhone,e.id];console.log(l),s.executeSql("UPDATE restaurants SET restaurantName=?, restaurantLocation=?, restaurantMainMenu=?, restaurantPhone=? WHERE id=?;",l,t,i.f.errorHandler)},i.f.errorHandler,()=>console.log("Success: update transaction successfully"))}selectRestaurant(e){let t=[e];return new Promise((s,r)=>{this.getDatabaseRestaurant().transaction(function l(v){v.executeSql("SELECT * FROM restaurants WHERE id=?;",t,(w,o)=>{if(o.rows.length>0){let u=o.rows[0],S=new c(u.restaurantName,u.restaurantLocation,u.restaurantMainMenu,u.restaurantPhone);S.id=u.id,s(S)}else r("No such restaurant found")},i.f.errorHandler)},i.f.errorHandler,()=>console.log("Success: select transaction successfully"))})}}return d.\u0275fac=function(e){return new(e||d)(g.LFG(i.f),g.LFG(D.e))},d.\u0275prov=g.Yz7({token:d,factory:d.\u0275fac,providedIn:"root"}),d})()},4362:(H,E,R)=>{R.d(E,{e:()=>D});var c=R(3104);class i{constructor(d,a,e,t){this.reviewId=-1,this.restaurantId=-1,this.username="",this.reviewRating=0,this.reviewDetail="",this.restaurantId=d,this.username=a,this.reviewRating=e,this.reviewDetail=t}}var g=R(1223);let D=(()=>{class f{constructor(){}getDatabaseRestaurant(){return c.f.db}insertReview(a,e){this.getDatabaseRestaurant().transaction(function t(n){let r=[a.restaurantId,a.username,a.reviewRating,a.reviewDetail];console.log(r),n.executeSql("INSERT INTO reviews(restaurantId, username, reviewRating, reviewDetail) VALUES(?, ?, ?, ?);",r,e,c.f.errorHandler)},c.f.errorHandler,()=>console.log("Success: insert review transaction successfully"))}selectAllReview(){let a=[],e=[];return new Promise((t,n)=>{this.getDatabaseRestaurant().transaction(function s(r){r.executeSql("SELECT * FROM reviews;",a,(v,h)=>{if(h.rows.length>0){for(let w=0;w<h.rows.length;w++){let o=h.rows[w],u=new i(o.restaurantId,o.username,o.reviewRating,o.reviewDetail);u.reviewId=o.reviewId,e.push(u)}t(e)}else n("No reviews found")},c.f.errorHandler)},c.f.errorHandler,()=>console.log("Success: selectAllReview transaction successfully"))})}deleteReview(a,e){this.getDatabaseRestaurant().transaction(function t(n){n.executeSql("DELETE FROM reviews WHERE reviewId=?;",[a.reviewId],e,c.f.errorHandler)},c.f.errorHandler,()=>console.log("Success: delete review transaction successfully"))}selectReview(a){let e=[a];return new Promise((n,s)=>{this.getDatabaseRestaurant().transaction(function r(l){l.executeSql("SELECT * FROM reviews WHERE reviewId=?;",e,(h,w)=>{if(w.rows.length>0){let o=w.rows[0],u=new i(o.restaurantId,o.username,o.reviewRating,o.reviewDetail);u.reviewId=o.reviewId,n(u)}else s("No such review found")},c.f.errorHandler)},c.f.errorHandler,()=>console.log("Success: select review transaction successfully"))})}updateReview(a,e){this.getDatabaseRestaurant().transaction(function t(n){let r=[a.restaurantId,a.username,a.reviewRating,a.reviewDetail,a.reviewId];console.log(r),n.executeSql("UPDATE reviews SET restaurantId=?, username=?, reviewRating=?, reviewDetail=? WHERE reviewId=?;",r,e,c.f.errorHandler)},c.f.errorHandler,()=>console.log("Success: update review transaction successfully"))}}return f.\u0275fac=function(a){return new(a||f)},f.\u0275prov=g.Yz7({token:f,factory:f.\u0275fac,providedIn:"root"}),f})()}}]);